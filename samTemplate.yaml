AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CD Demo Lambda
Resources:
  IndexPhotosLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: index-photos-cd
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LambdaCode/LF1/lambda_function.py
      Description: 'Index photos function'
      MemorySize: 128
      Timeout: 30
      Layers:
        - 'arn:aws:lambda:us-east-1:232083808386:layer:requests:2'
      Role: 'arn:aws:iam::232083808386:role/service-role/indexPhotosRole'
#      Events:
#        getAZsAPI:
#          Type: Api
#          Properties:
#            Path: /getazs
#            Method: get
      Environment:
        Variables:
          REGION: us-east-1
      VpcConfig:
        SecurityGroupIds:
          - sg-9c472db5
        SubnetIds:
          - subnet-ec51438b

  SearchPhotosLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: search-photos-cd
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LambdaCode/LF2/lambda_function.py
      Description: 'Search photos function'
      MemorySize: 128
      Timeout: 30
      Layers:
        - 'arn:aws:lambda:us-east-1:232083808386:layer:elasticsearch:2'
      Role: 'arn:aws:iam::232083808386:role/service-role/Search-photos-role'
      #      Events:
      #        getAZsAPI:
      #          Type: Api
      #          Properties:
      #            Path: /getazs
      #            Method: get
      Environment:
        Variables:
          REGION: us-east-1
      VpcConfig:
        SecurityGroupIds:
          - sg-9c472db5
        SubnetIds:
          - subnet-ec51438b

  PhotosES:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: photos-cd
      ElasticsearchVersion: '7.4'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        ZoneAwarenessEnabled: false
        InstanceType: 'r5.large.elasticsearch'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: 'gp2'
      VPCOptions:
        SecurityGroupIds:
          - sg-9c472db5
        SubnetIds:
          - subnet-ec51438b

  PhotoBucketS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ass3-b2-cd
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
#            Function: !GetAtt IndexPhotosLambda.Arn
            Function: 'arn:aws:lambda:us-east-1:232083808386:function:index-photos-cd'
#      PublicAccessBlockConfiguration:
#        BlockPublicAcls: false
#        BlockPublicPolicy: false
#        IgnorePublicAcls: false
#        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: 'error.html'
        IndexDocument: 'index.html'
#
  PhotoBucketS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: ass3-b2-cd
      PolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Sid": "AWSRekognitionS3AclBucketRead20191011",
            "Effect": "Allow",
            "Principal": {
              "Service": "rekognition.amazonaws.com"
            },
            "Action": [
              "s3:GetBucketAcl",
              "s3:GetBucketLocation"
            ],
#            "Resource": "arn:aws:s3:::ass3-b2-cd"
            "Resource": !GetAtt PhotoBucketS3.Arn
          },
          {
            "Sid": "AWSRekognitionS3GetBucket20191011",
            "Effect": "Allow",
            "Principal": {
              "Service": "rekognition.amazonaws.com"
            },
            "Action": [
              "s3:GetObject",
              "s3:GetObjectAcl",
              "s3:GetObjectVersion",
              "s3:GetObjectTagging"
            ],
#            "Resource": "arn:aws:s3:::ass3-b2/*"
#            "Resource": "arn:aws:s3:::ass3-b2-cd/*"
            "Resource": !GetAtt PhotoBucketS3.Arn
          },
          {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
#            "Resource": "arn:aws:s3:::ass3-b2-cd/*"
            "Resource": !GetAtt PhotoBucketS3.Arn
          }
          ]
        }

  # link to lambda on put
  # public access DONE
  # Bucket policy DONE


