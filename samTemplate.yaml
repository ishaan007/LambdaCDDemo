AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CD Demo Lambda
Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: 'API for assignment 3 for Cloud Computing and Big Data course'
      EndpointConfiguration:
        Types: 
          - REGIONAL
      Name: 'AIPhotoAlbumAPI'

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'search'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          'application/json': "{\n\"query\": \"$input.params(\"q\")\"\n}"
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${SearchPhotosLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters: 
            'method.response.header.Access-Control-Allow-Origin': false
          ResponseModels:
            'application/json': !Ref SearchResponseModel
        - StatusCode: '403'
          ResponseModels:
            'application/json': !Ref ErrorModel
        - StatusCode: '500'
          ResponseModels:
            'application/json': !Ref ErrorModel
      OperationName: 'search'
      RequestParameters:
        'method.request.querystring.q': false
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  SearchResponseModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: 'SearchResponse'
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ErrorModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: 'Error'
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'beta'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  IndexPhotosLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: index-photos-cd
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LambdaCode/LF1/lambda_function.py
      Description: 'Index photos function'
      MemorySize: 128
      Timeout: 30
      Layers:
        - 'arn:aws:lambda:us-east-1:232083808386:layer:requests:2'
      Role: 'arn:aws:iam::232083808386:role/service-role/indexPhotosRole'
#      Events:
#        getAZsAPI:
#          Type: Api
#          Properties:
#            Path: /getazs
#            Method: get
      Environment:
        Variables:
          REGION: us-east-1
      VpcConfig:
        SecurityGroupIds:
          - sg-9c472db5
        SubnetIds:
          - subnet-ec51438b

  IndexPhotosLambdaS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
#      EventSourceToken: String
      FunctionName: !GetAtt IndexPhotosLambda.Arn
      Principal: 's3.amazonaws.com'
#      SourceAccount: String
      SourceArn: 'arn:aws:s3:::ass3-b2-cd'


  SearchPhotosLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: search-photos-cd
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      CodeUri: ./LambdaCode/LF2/lambda_function.py
      Description: 'Search photos function'
      MemorySize: 128
      Timeout: 30
      Layers:
        - 'arn:aws:lambda:us-east-1:232083808386:layer:elasticsearch:2'
      Role: 'arn:aws:iam::232083808386:role/service-role/Search-photos-role'
      # Events:
      #   AIPhotoAlbumAPI:
      #     Type: Api
      #     Properties:
      #       Path: /search
      #       Method: get
      Environment:
        Variables:
          REGION: us-east-1
      VpcConfig:
        SecurityGroupIds:
          - sg-9c472db5
        SubnetIds:
          - subnet-ec51438b

  PhotosES:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: photos-cd
      ElasticsearchVersion: '7.4'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        ZoneAwarenessEnabled: false
        InstanceType: 'r5.large.elasticsearch'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: 'gp2'
      VPCOptions:
        SecurityGroupIds:
          - sg-9c472db5
        SubnetIds:
          - subnet-ec51438b

  PhotoBucketS3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: ass3-b2-cd
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:Put'
            Function: !GetAtt IndexPhotosLambda.Arn
#            Function: 'arn:aws:lambda:us-east-1:232083808386:function:index-photos-cd'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: 'error.html'
        IndexDocument: 'index.html'
#
  PhotoBucketS3Policy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PhotoBucketS3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSRekognitionS3AclBucketRead20191011
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action:
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
#            Resource: 'arn:aws:s3:::ass3-b2-cd'
            Resource: !GetAtt PhotoBucketS3.Arn
          - Sid: AWSRekognitionS3GetBucket20191011
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action:
              - 's3:GetObject'
              - 's3:GetObjectAcl'
              - 's3:GetObjectVersion'
              - 's3:GetObjectTagging'
#            Resource: 'arn:aws:s3:::ass3-b2-cd/*'
            Resource: !Join [ "/", [ !GetAtt PhotoBucketS3.Arn, '*']]
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
#            Resource: 'arn:aws:s3:::ass3-b2-cd/*'
            Resource: !Join [ "/", [ !GetAtt PhotoBucketS3.Arn, '*']]


#        {
#          "Version": "2012-10-17",
#          "Statement": [
#          {
#            "Sid": "AWSRekognitionS3AclBucketRead20191011",
#            "Effect": "Allow",
#            "Principal": {
#              "Service": "rekognition.amazonaws.com"
#            },
#            "Action": [
#              "s3:GetBucketAcl",
#              "s3:GetBucketLocation"
#            ],
##            "Resource": "arn:aws:s3:::ass3-b2-cd"
##            "Resource": !Join [ "/", [ !GetAtt PhotoBucketS3.Arn, '*']]
#            "Resource": "arn:aws:s3:::ass3-b2-cd/*"
#          },
#          {
#            "Sid": "AWSRekognitionS3GetBucket20191011",
#            "Effect": "Allow",
#            "Principal": {
#              "Service": "rekognition.amazonaws.com"
#            },
#            "Action": [
#              "s3:GetObject",
#              "s3:GetObjectAcl",
#              "s3:GetObjectVersion",
#              "s3:GetObjectTagging"
#            ],
##            "Resource": "arn:aws:s3:::ass3-b2/*"
#            "Resource": "arn:aws:s3:::ass3-b2-cd/*"
##            "Resource": !GetAtt PhotoBucketS3.Arn
##            "Resource": !Join [ "/", [ !GetAtt PhotoBucketS3.Arn, '*']]
#          },
#          {
#            "Sid": "PublicReadGetObject",
#            "Effect": "Allow",
#            "Principal": "*",
#            "Action": "s3:GetObject",
#            "Resource": "arn:aws:s3:::ass3-b2-cd/*"
##            "Resource": !GetAtt PhotoBucketS3.Arn
##            "Resource": !Join [ "/", [ !GetAtt PhotoBucketS3.Arn, '*']]
#          }
#          ]
#        }

  # link to lambda on put
  # public access DONE
  # Bucket policy DONE


